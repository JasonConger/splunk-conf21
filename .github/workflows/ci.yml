name: CI
on:
  push:
    branches:
      - main
  repository_dispatch:
  
jobs:

  # Run linters to help validate source code
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  # Semgrep detects and prevents bugs and anti-patterns in your codebase
  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    # Skip any PR created by dependabot to avoid permission issues
    if: (github.actor != 'dependabot[bot]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/r2c
  
  build:
    # Build, package, and upload artifacts
    name: Build
    needs:
      - lint
      - semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          #semantic-release won't trigger a tagged build if this is not set false
          persist-credentials: false
      
      # Our add-on contains Python, so we need to install Python in the container
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi
          
          
          
  #test-unit:
  #  name: Run Unit Tests
  #  runs-on: ubuntu-latest
  #  needs: lint
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2
  #    - run: mkdir -p dist
  #    - name: Set up Python
  #      uses: actions/setup-python@v2
  #      with:
  #        python-version: 3.9
  #    - name: Install dependencies
  #      run: |
  #        python -m pip install --upgrade pip
  #        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #    - name: Run unittests
  #      run: |
  #        python3 -m unittest discover tests/
          
  #ucc-gen:
  #  name: Generate App Bundle
  #  needs: test-unit
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2
  #    - run: mkdir -p dist
  #    - name: Set up Python
  #      uses: actions/setup-python@v2
  #      with:
  #        python-version: 3.9
  #    - name: Install dependencies
  #      run: |
  #        python -m pip install --upgrade pip
  #        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #    - run: ucc-gen --ta-version 0.0.1
  #    - run: |
  #        mkdir -p build
  #        tar cfvz build/TA_Dropbox.tgz -C output TA_Dropbox/
  #    - uses: actions/upload-artifact@v2
  #      with:
  #        name: app_tgz
  #        path: build/TA_Dropbox.tgz

  #    - uses: actions/upload-artifact@v2
  #      with:
  #        name: ucc_out
  #        path: output/TA_Dropbox

  #appinspect:
  #  runs-on: ubuntu-latest
    
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Run AppInspect
  #      uses: splunk/appinspect-cli-action@v1.1.0
  #      with:
  #        app_path: ./output/TA_Dropbox
          
  #    - name: Upload AppInspect Results
  #      uses: actions/upload-artifact@v2
  #      with:
  #        name: appinspect-results
  #        path: appinspect_result.json
  
  # Build the Splunk package and upload as an artifact
  #build:
  #  needs: appinspect
  #  name: build
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Package app with Splunk Packaging Toolkit (SLIM)
  #      id: slim
  #      uses: splunk/addonfactory-packaging-toolkit-action@v1.1.0
  #      with:
  #        source: ./output/TA_Dropbox
      
  #    - name: Upload SLIM package as an artifact
  #      uses: actions/upload-artifact@v2
  #      with:
  #        name: splunkbase-package
  #        path: ${{ steps.slim.outputs.OUTPUT }}
  
  
  
