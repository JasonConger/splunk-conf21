name: CI
on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - "main"
      - "develop"
  
jobs:

  build:
    # Build, package, inspect, and upload artifacts
    name: Build
    needs:
      - lint
      - semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # semantic-release won't trigger a tagged build if this is not set false
          persist-credentials: false
      
      # Our add-on contains Python code, so we need to install Python in the container
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      
      # Install any dev Python requirements in requirements_dev.txt
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi

      # Get globalConfig contents as a variable
      - name: Get globalConfig.json Settings
        id: get-globalConfig
        run: |
          content=`cat globalConfig.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=globalConfigJson::$content"
      
      # Build the package with UCC generator
      - name: Build Splunk Package
        id: uccgen
        uses: splunk/addonfactory-ucc-generator-action@v1
        with:
          version: ${{ fromJson(steps.get-globalConfig.outputs.globalConfigJson).meta.version }}
      
      - name: Package Splunk App with SLIM
        id: slim
        uses: splunk/addonfactory-packaging-toolkit-action@v1
        with:
          source: ${{ steps.uccgen.outputs.OUTPUT }}
      
      - name: Upload SLIM raw package as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: package-raw
          path: ${{ steps.uccgen.outputs.OUTPUT }}**
        if: always()
        
      - name: Upload SLIM splunkbase package as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: package-splunkbase
          path: ${{ steps.slim.outputs.OUTPUT }}
        if: always()
      
      - name: Upload SLIM deployment parts as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: package-deployment
          path: build/package/deployment**
        if: always()